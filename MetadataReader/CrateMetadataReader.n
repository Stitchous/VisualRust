using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using PeNet;
using Katis.Data;
using System.IO;
using System.IO.Compression;

namespace MetadataReader
{
    public class CrateMetadata
    {
        public RustVersion : string;
        public Name : string;
        public Triple : string;
    }

    public module CrateMetadataReader
    {
        public TryLoad(crateFile : PeFile) : option[CrateMetadata]
        {
            def section = 
                crateFile
                    .ImageSectionHeaders.Find(section => Encoding.UTF8.GetString(section.Name).TrimEnd(0 :> char) == metadataSectionName);
            
            def metadataSectionBody = 
                section.Chain(sec =>
                {
                    def rustMetadataSection = array(sec.SizeOfRawData :> int) : array[byte];
                    Array.Copy(crateFile.Buff, sec.PointerToRawData :> int, rustMetadataSection, 0, sec.SizeOfRawData :> int);
                    
                    if (rustMetadataSection.Take(metadataHeader.Length).SequenceEqual(metadataHeader))
                        Some(MemoryStream(rustMetadataSection, metadataHeader.Length, rustMetadataSection.Length - metadataHeader.Length))
                    else
                        None()
                });
            
            
            def ReadFromStreamCore(stream : Stream)   
            {
                def buffer = array(1024);
                
                def bytesRead = stream.Read(buffer, 0, buffer.Length);

                match (bytesRead)
                {
                    | 0 => []
                    | len when len == buffer.Length => Enumerable.Concat([buffer], ReadFromStreamCore(stream))
                    | len => 
                    {
                        def smallBuffer = array(len);
                        Array.Copy(buffer, 0l, smallBuffer, 0l, len);
                        [smallBuffer]
                    }
                }
            }

            def ReadFromStream(stream : Stream)
            {
                def MergeBuffers(buffers, currentOffset, resultBuffer)
                {
                    match(buffers)
                    {
                        | head :: tail => 
                            Array.Copy(head, 0, resultBuffer, currentOffset, head.Length);
                            MergeBuffers(tail, currentOffset + head.Length, resultBuffer);
                        | [] => ()
                    }
                }
            
                def buffers = ReadFromStreamCore(stream);

                def totalLen = buffers.Sum(buffer => buffer.Length);
                def resultBuffer = array(totalLen);

                MergeBuffers(NList.ToList(buffers), 0, resultBuffer);
                resultBuffer;

            }

            metadataSectionBody.Map(m => 
                    {                   
                        DeflateStream(m, CompressionMode.Decompress);
                    })
                    .Map(ReadFromStream)
                    .Map(ReadMetadata);
        }

        private ReadMetadata(metadataSectionBody : array[byte]) : CrateMetadata
        {
            def offset = BitConverter.ToInt32(metadataSectionBody.Skip(metadataHeader.Length).Take(sizeof(uint)).Reverse().ToArray(), 0);
            def strin = 
                System.Text.Encoding.UTF8.GetString(metadataSectionBody, offset + 1, metadataSectionBody.Length - offset - 1);

            def (meta, _) = RustSerialization.Deserialize.[CrateMetadata](metadataSectionBody, offset);
            meta


        }

        public static metadataHeader : array[byte] = array[0b,0,0,0, 'r' :> byte, 'u' :> byte, 's' :> byte, 't' :> byte, 0, 0, 0, 3];
        private static metadataSectionName = ".rustc";
    }
}
